@charset "UTF-8";
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

*, *:before, *:after {
  box-sizing: border-box;
}

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/* ==========================================================================
 * Global
 * ========================================================================== */
html {
  min-width: 1020px;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
  font-size: 16px;
  line-height: 1.2;
  font-family: Helvetica, sans-serif;
  color: #1c1c1c;
}

body {
  line-height: 1.2;
}

a {
  color: inherit;
  text-decoration: none;
}

a:hover {
  text-decoration: none;
}

.link {
  border-bottom: 1px solid;
  -webkit-transition: all .3s;
  transition: all .3s;
}

.link:hover {
  border-color: transparent;
}

.inverselink {
  border-bottom: 1px solid transparent;
  -webkit-transition: all .3s;
  transition: all .3s;
}

.inverselink:hover {
  border-color: currentColor;
}

sup {
  font-size: .8em;
  vertical-align: super;
}

.text {
  font-size: 18px;
  line-height: 1.44444;
}

.text h3 {
  font-size: 24px;
  font-weight: 700;
  margin: 0 0 1em;
}

.text b {
  font-weight: 700;
}

.text strong {
  font-weight: 700;
}

.text em {
  font-style: italic;
}

.text p {
  margin: 0 0 1.2em;
}

.text p:last-child {
  margin: 0;
}

.text a {
  border-bottom: 1px solid;
  -webkit-transition: all .3s;
  transition: all .3s;
}

.text a:hover {
  border-color: transparent;
}

/* ==========================================================================
* Кнопки
* ========================================================================== */
.button {
  display: inline-block;
  border: 0;
  outline: none;
  text-align: center;
  text-decoration: none;
  padding: 0;
  -webkit-transition: all .3s;
  transition: all .3s;
  line-height: 1;
  font-family: Helvetica, sans-serif;
  cursor: pointer;
}

.button:disabled {
  background: #ccc;
  cursor: default;
}

.button:disabled:hover {
  background: #ccc;
}

.button--color {
  background: #000;
  color: #fff;
}

.button--color:hover {
  background: #0d0d0d;
}

.button--color:active {
  background: black;
}

.button--m {
  border-radius: 8px;
  font-weight: 700;
  font-size: 12px;
  padding: 8px 20px 8px;
}

.button--l {
  border-radius: 8px;
  font-weight: 700;
  font-size: 15px;
  padding: 10px 20px 10px;
}

.button--block {
  width: 100%;
  padding-left: 0;
  padding-right: 0;
}

/* ==========================================================================
* Формы
* ========================================================================== */
.form {
  *zoom: 1;
}

.form:before, .form:after {
  content: " ";
  /* 1 */
  display: table;
  /* 2 */
}

.form:after {
  clear: both;
}

.form__line {
  *zoom: 1;
  margin-bottom: 16px;
}

.form__line:before, .form__line:after {
  content: " ";
  /* 1 */
  display: table;
  /* 2 */
}

.form__line:after {
  clear: both;
}

.form__input-placeholder {
  position: relative;
  margin-bottom: 16px;
}

.form__input-placeholder--inline {
  width: 48%;
  float: right;
  margin-bottom: 0;
}

.form__input-placeholder--inline:first-child {
  float: left;
}

.form label.error {
  font-size: 13px;
  color: #ef6d51;
}

.form__button-placeholder {
  margin-top: 20px;
}

.form__input, .form__textarea {
  -webkit-appearance: none;
  padding: 0 0 0 20px;
  width: 100%;
  outline: none;
  border: 1px solid #d7d7d7;
  max-width: 100%;
  font-size: 15px;
  font-family: Helvetica, sans-serif;
  background: #f6f5f1;
  border-radius: 5px;
  box-shadow: inset 0 2px 3px rgba(0, 0, 0, 0.13);
}

.form__input.error, .form__textarea.error {
  border-color: #ef6d51;
}

.form__input--h40 {
  height: 40px;
  line-height: 40px;
}

.form__textarea {
  padding-top: 10px;
  height: 210px;
}

.form__textarea--h120 {
  height: 120px;
}

/* ==========================================================================
 * checkbox
 * ========================================================================== */
.checkbox {
  display: inline-block;
  position: relative;
}

.checkbox__input {
  margin: -2px 0 0;
}

/* ==========================================================================
 * Layout
 * ========================================================================== */
.container {
  overflow: hidden;
  position: relative;
}

/* ==========================================================================
 * section
 * ========================================================================== */
.section {
  padding: 80px 0 80px;
}

.section__wrap {
  *zoom: 1;
  max-width: 1000px;
  padding: 0 10px;
  margin: auto;
}

.section__wrap:before, .section__wrap:after {
  content: " ";
  /* 1 */
  display: table;
  /* 2 */
}

.section__wrap:after {
  clear: both;
}

.section__title {
  text-align: center;
  margin: 0 0 40px;
  font-weight: 700;
  font-size: 36px;
  line-height: 1.38889;
}

.section__text {
  margin: 0 0 30px;
}

/* ==========================================================================
 * helpers
 * ========================================================================== */
.hidden {
  display: none;
}

/* @media only screen and (min-width: 740px){
  @import "_tablet" ;
} 
*/

/*# sourceMappingURL=data:application/json;base64, */
