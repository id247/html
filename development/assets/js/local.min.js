/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/Users/bazhenov/Work/_html/development/assets/js";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _app = __webpack_require__(/*! ./app */ 1);
	
	var _app2 = _interopRequireDefault(_app);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	document.addEventListener('DOMContentLoaded', function () {
	
		_app2.default.init();
	});

/***/ },
/* 1 */
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	exports.default = function (window, document, $) {
		console.log('run');
	
		var maxHeight = 650;
		var maxWidth = 1020;
	
		var isMobile = function () {
			if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {
				return true;
			} else {
				return false;
			}
		}();
	
		function scrollMeTo() {
	
			var $header = $('#header');
	
			$('.js-goto').on('click', function (e) {
				var paddingTop = $(window).width() > maxWidth ? $header.outerHeight() : 0;
				var $target = $(this.href.replace(/^.*\#/, '#'));
	
				if ($target.length === 1) {
					e.preventDefault();
	
					$('body,html').animate({
						scrollTop: $target.offset().top - paddingTop,
						easing: 'ease-in'
					}, 500);
				};
			});
		};
	
		function header() {
			var $header = $('header');
	
			function fix() {
				var scrollTop = $(window).scrollTop();
				var showPosition = 200;
	
				if (scrollTop > 0 && scrollTop <= showPosition) {
					$header.addClass('header--hidden');
					$header.removeClass('header--scrolled');
				} else if (scrollTop > showPosition) {
					$header.addClass('header--scrolled');
					$header.removeClass('header--hidden');
				} else {
					$header.removeClass('header--scrolled');
					$header.removeClass('header--hidden');
				}
			}
			fix();
	
			$(document).on('scroll', fix);
		}
	
		function menu() {
			var $menuHrefs = $('.menu__href');
			var $sections = $('.section');
	
			var winHeight = window.innerHeight || document.documentElement.clientHeight;
	
			function setActive() {
				$sections.each(function (index, section) {
					var sectionId = $(this).attr('id');
					var rect = this.getBoundingClientRect();
					var rectTop = Math.round(rect.top);
					var rectBottom = Math.round(rect.bottom);
	
					if (rectTop <= 50 && rectBottom / 2 <= winHeight) {
						$menuHrefs.removeClass('active');
						$menuHrefs.filter('[href="#' + sectionId + '"]').addClass('active');
					}
				});
			}
			setActive();
	
			$(window).on('scroll', function (e) {
				setActive();
			});
	
			$(window).on('resize', function (e) {
				winHeight = window.innerHeight || document.documentElement.clientHeight;
				setActive();
			});
		}
	
		/*
	 	submit form
	 */
	
		function form() {
	
			$('form').each(function () {
	
				var $form = $(this);
				var $button = $form.find('button[type="submit"]');
				var $success = $form.find('.order-form__success');
	
				$success.hide();
	
				$form.on('submit', function (e) {
	
					e.preventDefault();
	
					var form = e.target;
	
					$button.text('Отправка данных...');
					$button.attr('disabled', true);
	
					$.ajax({
						url: $form.attr('action'),
						method: 'POST',
						data: $form.serialize(),
						dataType: 'json',
						success: function success(response) {
							console.log(response);
							$success.html('Спасибо! Ваша заявка была успешно отправлена!');
							$success.removeClass('order-form__success--error');
						},
						error: function error(xhr, ajaxOptions, _error) {
							console.log('Data could not be saved.' + _error.message);
							$success.addClass('order-form__success--error');
							$success.html('Ошибка сохранения данных, попробуйте еще раз. Если ошибка повторится - свяжитесь с нами.');
						},
						complete: function complete() {
							$success.show();
							$button.attr('disabled', false).text('Отправить заявку');
						}
					});
				});
			});
		}
	
		function init() {
	
			if (!isMobile) {
				header();
			}
	
			scrollMeTo();
			menu();
			form();
		}
	
		return {
			init: init
		};
	}(window, document, jQuery, undefined);

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,